2257. Count Unguarded Cells in the Grid

You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.

A guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.

Return the number of unoccupied cells that are not guarded.

 

Example 1:


Input: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]
Output: 7
Explanation: The guarded and unguarded cells are shown in red and green respectively in the above diagram.
There are a total of 7 unguarded cells, so we return 7.
Example 2:


Input: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]
Output: 4
Explanation: The unguarded cells are shown in green in the above diagram.
There are a total of 4 unguarded cells, so we return 4.

Solution code:
class Solution {
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        char[][] grid=new char[m][n];
        for(int i=0;i<m;i++){
            Arrays.fill(grid[i],' ');
        }
        for(int[] wall:walls){
            grid[wall[0]][wall[1]]='W';
        }
        for(int[] guard:guards){
            grid[guard[0]][guard[1]]='G';
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='G'){
                    //RIGHT
                    for(int k=j+1;k<n;k++){
                        if(grid[i][k]=='W' || grid[i][k]=='G')break;
                        grid[i][k]='B';
                    }// LEFT
                    for (int k=j-1;k>=0;k--) {
                        if(grid[i][k]=='W'||grid[i][k]=='G') break;
                        grid[i][k]='B';
                    }
                    // DOWN
                    for (int k=i+1;k<m;k++) {
                        if(grid[k][j]=='W' || grid[k][j]=='G') break;
                        grid[k][j] = 'B';
                    }
                    // UP
                    for (int k=i-1;k>=0;k--){
                        if(grid[k][j]=='W' || grid[k][j]=='G') break;
                        grid[k][j]='B';
                    }
                }
            }
        }
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++) {
                if(grid[i][j]==' ') {
                    count++;
                }
            }
        }
        return count;
    }
}
